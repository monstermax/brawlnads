import { ethers } from "hardhat";

async function main() {
    console.log("üß™ Test du g√©n√©rateur SVG am√©lior√© (cr√©atures)...");
    
    try {
        // D√©ployer le contrat de test am√©lior√©
        console.log("üì¶ D√©ploiement du contrat de test am√©lior√©...");
        const TestSVGGenerator = await ethers.getContractFactory("TestSVGGenerator_Improved");
        const testContract = await TestSVGGenerator.deploy();
        await testContract.waitForDeployment();
        
        console.log("‚úÖ Contrat de test am√©lior√© d√©ploy√©");
        
        // Tester la g√©n√©ration SVG avec les nouvelles fonctions
        const testCases = [
            { func: "generateWarriorSVG", name: "Warrior Alpha", class: "Warrior" },
            { func: "generateTestSVG", name: "Shadow Assassin", class: "Assassin" },
            { func: "generateMageSVG", name: "Arcane Mage", class: "Mage" },
            { func: "generateBerserkerSVG", name: "Rage Berserker", class: "Berserker" },
            { func: "generateGuardianSVG", name: "Shield Guardian", class: "Guardian" }
        ];
        
        for (let i = 0; i < testCases.length; i++) {
            const testCase = testCases[i];
            console.log(`\nüîç Test ${i + 1}: ${testCase.name} (${testCase.class})`);
            
            try {
                // G√©n√©rer le SVG
                const svgResult = await (testContract as any)[testCase.func]();
                
                console.log("‚úÖ SVG g√©n√©r√© avec succ√®s");
                console.log("  - Longueur:", svgResult.length, "caract√®res");
                console.log("  - Taille:", svgResult.includes('width="400"') ? "‚úÖ 400x400px" : "‚ùå Autre taille");
                
                // Analyser les √©l√©ments de cr√©ature
                const eyeCount = (svgResult.match(/<circle[^>]*fill="#FFFFFF"/g) || []).length;
                const pupilCount = (svgResult.match(/<circle[^>]*fill="#000000"/g) || []).length;
                const bodyShapes = svgResult.includes('<rect') || svgResult.includes('<ellipse') || svgResult.includes('<polygon');
                const mouth = svgResult.includes('<path d="M') || svgResult.includes('<ellipse cx="200" cy="210"');
                const accessories = svgResult.includes('transform=');
                const gradients = svgResult.includes('linearGradient');
                const statsPanel = svgResult.includes('font-family');
                
                console.log("  - Yeux blancs:", eyeCount, "cercles");
                console.log("  - Pupilles noires:", pupilCount, "cercles");
                console.log("  - Corps (forme):", bodyShapes ? "‚úÖ OUI" : "‚ùå NON");
                console.log("  - Bouche:", mouth ? "‚úÖ OUI" : "‚ùå NON");
                console.log("  - Accessoires de classe:", accessories ? "‚úÖ OUI" : "‚ùå NON");
                console.log("  - D√©grad√©s Monad:", gradients ? "‚úÖ OUI" : "‚ùå NON");
                console.log("  - Panneau stats:", statsPanel ? "‚úÖ OUI" : "‚ùå NON");
                
                // V√©rifier les couleurs Monad
                const monadColors = svgResult.includes('#836EF9') || svgResult.includes('#200052') || svgResult.includes('#A0055D');
                console.log("  - Couleurs Monad:", monadColors ? "‚úÖ OUI" : "‚ùå NON");
                
                // V√©rifier les effets de raret√©
                if (svgResult.includes('animate')) {
                    console.log("  - Effets de raret√©:", "‚úÖ Animations");
                } else if (svgResult.includes('filter="url(#glow)"')) {
                    console.log("  - Effets de raret√©:", "‚úÖ Effet de lueur");
                } else {
                    console.log("  - Effets de raret√©:", "‚úÖ Design de base");
                }
                
                // Sauvegarder le SVG pour inspection
                const fs = require('fs');
                const path = require('path');
                const filename = `improved_${testCase.name.toLowerCase().replace(' ', '_')}.svg`;
                const outputPath = path.join(__dirname, '../assets/', filename);
                fs.writeFileSync(outputPath, svgResult);
                console.log(`üíæ SVG sauvegard√©: ${outputPath}`);
                
                // √âvaluation globale
                const creatureScore = eyeCount + pupilCount + (bodyShapes ? 1 : 0) + (mouth ? 1 : 0) + (accessories ? 1 : 0);
                if (creatureScore >= 4) {
                    console.log("üéâ √âvaluation: ‚úÖ RESSEMBLE √Ä UNE CR√âATURE!");
                } else {
                    console.log("‚ö†Ô∏è √âvaluation: ‚ùå Ne ressemble pas assez √† une cr√©ature");
                }
                
            } catch (error) {
                console.error(`‚ùå Erreur pour ${testCase.name}:`, error);
            }
        }
        
        console.log("\nüéâ Test du g√©n√©rateur SVG am√©lior√© termin√©!");
        console.log("‚úÖ Les nouveaux Monanimals devraient ressembler √† de vraies cr√©atures avec:");
        console.log("  - Yeux expressifs style grenouille Monad");
        console.log("  - Corps avec formes g√©om√©triques selon la classe");
        console.log("  - Bouches expressives selon la personnalit√©");
        console.log("  - Accessoires uniques par classe");
        console.log("  - Couleurs et d√©grad√©s Monad");
        console.log("  - Effets de raret√© appropri√©s");
        console.log("üìÅ V√©rifiez les fichiers SVG dans contracts/assets/");
        
    } catch (error) {
        console.error("‚ùå Erreur:", error);
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå Erreur:", error);
        process.exit(1);
    });