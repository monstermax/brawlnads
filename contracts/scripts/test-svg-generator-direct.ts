import { ethers } from "hardhat";

async function main() {
    console.log("üß™ Test direct du g√©n√©rateur SVG...");
    
    try {
        // D√©ployer le contrat de test SVG
        console.log("üì¶ D√©ploiement du contrat de test...");
        const TestSVGGenerator = await ethers.getContractFactory("TestSVGGenerator");
        const testContract = await TestSVGGenerator.deploy();
        await testContract.waitForDeployment();
        
        console.log("‚úÖ Contrat de test d√©ploy√©");
        
        // Tester la g√©n√©ration SVG avec les fonctions pr√©d√©finies
        const testCases = [
            { func: "generateWarriorSVG", name: "Warrior Alpha" },
            { func: "generateTestSVG", name: "Shadow Assassin" },
            { func: "generateMageSVG", name: "Arcane Mage" }
        ];
        
        for (let i = 0; i < testCases.length; i++) {
            const testCase = testCases[i];
            console.log(`\nüîç Test ${i + 1}: ${testCase.name}`);
            
            try {
                // G√©n√©rer le SVG
                const svgResult = await (testContract as any)[testCase.func]();
                
                console.log("‚úÖ SVG g√©n√©r√© avec succ√®s");
                console.log("  - Longueur:", svgResult.length, "caract√®res");
                
                // V√©rifier les erreurs de filtres
                const filterMatches = svgResult.match(/filter="/g);
                const filterCount = filterMatches ? filterMatches.length : 0;
                console.log("  - Nombre d'attributs filter:", filterCount);
                
                // V√©rifier les filtres dupliqu√©s sur le m√™me √©l√©ment
                const lines = svgResult.split('\n');
                let duplicateFound = false;
                for (const line of lines) {
                    const filterMatches = line.match(/filter="/g);
                    if (filterMatches && filterMatches.length > 1) {
                        duplicateFound = true;
                        console.log("  - Ligne avec filtres dupliqu√©s:", line.trim());
                        break;
                    }
                }
                
                console.log("  - Filtres dupliqu√©s:", duplicateFound ? "‚ùå OUI" : "‚úÖ NON");
                
                // V√©rifier la structure des filtres combin√©s
                if (svgResult.includes('filter="url(#classFilter) url(#glow)"')) {
                    console.log("  - Filtres combin√©s correctement: ‚úÖ OUI");
                } else if (svgResult.includes('filter="url(#classFilter)"')) {
                    console.log("  - Filtre de classe seul: ‚úÖ OUI");
                } else {
                    console.log("  - Structure de filtres: ‚ùå PROBL√àME");
                }
                
                // Sauvegarder le SVG pour inspection
                const fs = require('fs');
                const path = require('path');
                const outputPath = path.join(__dirname, `../assets/test_${testCase.name.toLowerCase().replace(' ', '_')}.svg`);
                fs.writeFileSync(outputPath, svgResult);
                console.log(`üíæ SVG sauvegard√©: ${outputPath}`);
                
            } catch (error) {
                console.error(`‚ùå Erreur pour ${testCase.name}:`, error);
            }
        }
        
        console.log("\nüéâ Test du g√©n√©rateur SVG termin√©!");
        console.log("‚úÖ Le probl√®me des filtres dupliqu√©s devrait √™tre corrig√©");
        console.log("üìÅ V√©rifiez les fichiers SVG g√©n√©r√©s dans contracts/assets/");
        
    } catch (error) {
        console.error("‚ùå Erreur:", error);
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå Erreur:", error);
        process.exit(1);
    });