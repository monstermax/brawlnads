/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace BattleArena {
  export type BattleActionStruct = {
    attacker: BigNumberish;
    defender: BigNumberish;
    actionType: string;
    damage: BigNumberish;
    isCritical: boolean;
    isBlocked: boolean;
    description: string;
  };

  export type BattleActionStructOutput = [
    attacker: bigint,
    defender: bigint,
    actionType: string,
    damage: bigint,
    isCritical: boolean,
    isBlocked: boolean,
    description: string
  ] & {
    attacker: bigint;
    defender: bigint;
    actionType: string;
    damage: bigint;
    isCritical: boolean;
    isBlocked: boolean;
    description: string;
  };

  export type BattleStruct = {
    battleId: BigNumberish;
    battleType: BigNumberish;
    participants: BigNumberish[];
    players: AddressLike[];
    state: BigNumberish;
    winner: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    actions: BattleArena.BattleActionStruct[];
    entryFee: BigNumberish;
    prizePool: BigNumberish;
    replayGenerated: boolean;
  };

  export type BattleStructOutput = [
    battleId: bigint,
    battleType: bigint,
    participants: bigint[],
    players: string[],
    state: bigint,
    winner: bigint,
    startTime: bigint,
    endTime: bigint,
    actions: BattleArena.BattleActionStructOutput[],
    entryFee: bigint,
    prizePool: bigint,
    replayGenerated: boolean
  ] & {
    battleId: bigint;
    battleType: bigint;
    participants: bigint[];
    players: string[];
    state: bigint;
    winner: bigint;
    startTime: bigint;
    endTime: bigint;
    actions: BattleArena.BattleActionStructOutput[];
    entryFee: bigint;
    prizePool: bigint;
    replayGenerated: boolean;
  };
}

export interface BattleArenaInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "artifactContract"
      | "battleStats"
      | "battles"
      | "createDuel"
      | "createTournament"
      | "duelFee"
      | "emergencyCancelBattle"
      | "getBattle"
      | "getBattleActions"
      | "getPlayerBattles"
      | "monanimalContract"
      | "monanimalInBattle"
      | "owner"
      | "playerBattles"
      | "renounceOwnership"
      | "royaleFee"
      | "setContracts"
      | "setFees"
      | "tournamentFee"
      | "transferOwnership"
      | "weaponContract"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BattleActionExecuted"
      | "BattleCompleted"
      | "BattleCreated"
      | "BattleStarted"
      | "OwnershipTransferred"
      | "PrizeDistributed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "artifactContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "battleStats",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "battles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDuel",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTournament",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "duelFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyCancelBattle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBattle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBattleActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerBattles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "monanimalContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "monanimalInBattle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerBattles",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "royaleFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setContracts",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tournamentFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "weaponContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "artifactContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "battleStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "battles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createDuel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "duelFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyCancelBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBattle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBattleActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerBattles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "monanimalContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "monanimalInBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerBattles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "royaleFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tournamentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weaponContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BattleActionExecutedEvent {
  export type InputTuple = [
    battleId: BigNumberish,
    actionIndex: BigNumberish,
    action: BattleArena.BattleActionStruct
  ];
  export type OutputTuple = [
    battleId: bigint,
    actionIndex: bigint,
    action: BattleArena.BattleActionStructOutput
  ];
  export interface OutputObject {
    battleId: bigint;
    actionIndex: bigint;
    action: BattleArena.BattleActionStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BattleCompletedEvent {
  export type InputTuple = [
    battleId: BigNumberish,
    winner: BigNumberish,
    prizePool: BigNumberish
  ];
  export type OutputTuple = [
    battleId: bigint,
    winner: bigint,
    prizePool: bigint
  ];
  export interface OutputObject {
    battleId: bigint;
    winner: bigint;
    prizePool: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BattleCreatedEvent {
  export type InputTuple = [
    battleId: BigNumberish,
    battleType: BigNumberish,
    participants: BigNumberish[]
  ];
  export type OutputTuple = [
    battleId: bigint,
    battleType: bigint,
    participants: bigint[]
  ];
  export interface OutputObject {
    battleId: bigint;
    battleType: bigint;
    participants: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BattleStartedEvent {
  export type InputTuple = [battleId: BigNumberish];
  export type OutputTuple = [battleId: bigint];
  export interface OutputObject {
    battleId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrizeDistributedEvent {
  export type InputTuple = [
    battleId: BigNumberish,
    player: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [battleId: bigint, player: string, amount: bigint];
  export interface OutputObject {
    battleId: bigint;
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BattleArena extends BaseContract {
  connect(runner?: ContractRunner | null): BattleArena;
  waitForDeployment(): Promise<this>;

  interface: BattleArenaInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  artifactContract: TypedContractMethod<[], [string], "view">;

  battleStats: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        currentHealth: bigint;
        maxHealth: bigint;
        attack: bigint;
        defense: bigint;
        speed: bigint;
        magic: bigint;
        luck: bigint;
        isAlive: boolean;
        weaponId: bigint;
        artifactId: bigint;
      }
    ],
    "view"
  >;

  battles: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        battleId: bigint;
        battleType: bigint;
        state: bigint;
        winner: bigint;
        startTime: bigint;
        endTime: bigint;
        entryFee: bigint;
        prizePool: bigint;
        replayGenerated: boolean;
      }
    ],
    "view"
  >;

  createDuel: TypedContractMethod<
    [myMonanimalId: BigNumberish, opponentMonanimalId: BigNumberish],
    [void],
    "payable"
  >;

  createTournament: TypedContractMethod<
    [monanimalIds: BigNumberish[]],
    [void],
    "payable"
  >;

  duelFee: TypedContractMethod<[], [bigint], "view">;

  emergencyCancelBattle: TypedContractMethod<
    [battleId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBattle: TypedContractMethod<
    [battleId: BigNumberish],
    [BattleArena.BattleStructOutput],
    "view"
  >;

  getBattleActions: TypedContractMethod<
    [battleId: BigNumberish],
    [BattleArena.BattleActionStructOutput[]],
    "view"
  >;

  getPlayerBattles: TypedContractMethod<
    [player: AddressLike],
    [bigint[]],
    "view"
  >;

  monanimalContract: TypedContractMethod<[], [string], "view">;

  monanimalInBattle: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  playerBattles: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  royaleFee: TypedContractMethod<[], [bigint], "view">;

  setContracts: TypedContractMethod<
    [
      _monanimalContract: AddressLike,
      _weaponContract: AddressLike,
      _artifactContract: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setFees: TypedContractMethod<
    [
      _duelFee: BigNumberish,
      _tournamentFee: BigNumberish,
      _royaleFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  tournamentFee: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  weaponContract: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "artifactContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "battleStats"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        currentHealth: bigint;
        maxHealth: bigint;
        attack: bigint;
        defense: bigint;
        speed: bigint;
        magic: bigint;
        luck: bigint;
        isAlive: boolean;
        weaponId: bigint;
        artifactId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "battles"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        battleId: bigint;
        battleType: bigint;
        state: bigint;
        winner: bigint;
        startTime: bigint;
        endTime: bigint;
        entryFee: bigint;
        prizePool: bigint;
        replayGenerated: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createDuel"
  ): TypedContractMethod<
    [myMonanimalId: BigNumberish, opponentMonanimalId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createTournament"
  ): TypedContractMethod<[monanimalIds: BigNumberish[]], [void], "payable">;
  getFunction(
    nameOrSignature: "duelFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyCancelBattle"
  ): TypedContractMethod<[battleId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBattle"
  ): TypedContractMethod<
    [battleId: BigNumberish],
    [BattleArena.BattleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBattleActions"
  ): TypedContractMethod<
    [battleId: BigNumberish],
    [BattleArena.BattleActionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerBattles"
  ): TypedContractMethod<[player: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "monanimalContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "monanimalInBattle"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerBattles"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "royaleFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setContracts"
  ): TypedContractMethod<
    [
      _monanimalContract: AddressLike,
      _weaponContract: AddressLike,
      _artifactContract: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFees"
  ): TypedContractMethod<
    [
      _duelFee: BigNumberish,
      _tournamentFee: BigNumberish,
      _royaleFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tournamentFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "weaponContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BattleActionExecuted"
  ): TypedContractEvent<
    BattleActionExecutedEvent.InputTuple,
    BattleActionExecutedEvent.OutputTuple,
    BattleActionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "BattleCompleted"
  ): TypedContractEvent<
    BattleCompletedEvent.InputTuple,
    BattleCompletedEvent.OutputTuple,
    BattleCompletedEvent.OutputObject
  >;
  getEvent(
    key: "BattleCreated"
  ): TypedContractEvent<
    BattleCreatedEvent.InputTuple,
    BattleCreatedEvent.OutputTuple,
    BattleCreatedEvent.OutputObject
  >;
  getEvent(
    key: "BattleStarted"
  ): TypedContractEvent<
    BattleStartedEvent.InputTuple,
    BattleStartedEvent.OutputTuple,
    BattleStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PrizeDistributed"
  ): TypedContractEvent<
    PrizeDistributedEvent.InputTuple,
    PrizeDistributedEvent.OutputTuple,
    PrizeDistributedEvent.OutputObject
  >;

  filters: {
    "BattleActionExecuted(uint256,uint256,tuple)": TypedContractEvent<
      BattleActionExecutedEvent.InputTuple,
      BattleActionExecutedEvent.OutputTuple,
      BattleActionExecutedEvent.OutputObject
    >;
    BattleActionExecuted: TypedContractEvent<
      BattleActionExecutedEvent.InputTuple,
      BattleActionExecutedEvent.OutputTuple,
      BattleActionExecutedEvent.OutputObject
    >;

    "BattleCompleted(uint256,uint256,uint256)": TypedContractEvent<
      BattleCompletedEvent.InputTuple,
      BattleCompletedEvent.OutputTuple,
      BattleCompletedEvent.OutputObject
    >;
    BattleCompleted: TypedContractEvent<
      BattleCompletedEvent.InputTuple,
      BattleCompletedEvent.OutputTuple,
      BattleCompletedEvent.OutputObject
    >;

    "BattleCreated(uint256,uint8,uint256[])": TypedContractEvent<
      BattleCreatedEvent.InputTuple,
      BattleCreatedEvent.OutputTuple,
      BattleCreatedEvent.OutputObject
    >;
    BattleCreated: TypedContractEvent<
      BattleCreatedEvent.InputTuple,
      BattleCreatedEvent.OutputTuple,
      BattleCreatedEvent.OutputObject
    >;

    "BattleStarted(uint256)": TypedContractEvent<
      BattleStartedEvent.InputTuple,
      BattleStartedEvent.OutputTuple,
      BattleStartedEvent.OutputObject
    >;
    BattleStarted: TypedContractEvent<
      BattleStartedEvent.InputTuple,
      BattleStartedEvent.OutputTuple,
      BattleStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PrizeDistributed(uint256,address,uint256)": TypedContractEvent<
      PrizeDistributedEvent.InputTuple,
      PrizeDistributedEvent.OutputTuple,
      PrizeDistributedEvent.OutputObject
    >;
    PrizeDistributed: TypedContractEvent<
      PrizeDistributedEvent.InputTuple,
      PrizeDistributedEvent.OutputTuple,
      PrizeDistributedEvent.OutputObject
    >;
  };
}
