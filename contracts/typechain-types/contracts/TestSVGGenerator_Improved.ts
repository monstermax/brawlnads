/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TestSVGGenerator_ImprovedInterface extends Interface {
  getFunction(nameOrSignature: "generateSVG"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "generateSVG",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "generateSVG",
    data: BytesLike
  ): Result;
}

export interface TestSVGGenerator_Improved extends BaseContract {
  connect(runner?: ContractRunner | null): TestSVGGenerator_Improved;
  waitForDeployment(): Promise<this>;

  interface: TestSVGGenerator_ImprovedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  generateSVG: TypedContractMethod<
    [
      name: string,
      classType: BigNumberish,
      rarity: BigNumberish,
      level: BigNumberish,
      health: BigNumberish,
      attack: BigNumberish,
      defense: BigNumberish,
      speed: BigNumberish,
      magic: BigNumberish,
      luck: BigNumberish,
      colorScheme: string,
      wins: BigNumberish,
      losses: BigNumberish
    ],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "generateSVG"
  ): TypedContractMethod<
    [
      name: string,
      classType: BigNumberish,
      rarity: BigNumberish,
      level: BigNumberish,
      health: BigNumberish,
      attack: BigNumberish,
      defense: BigNumberish,
      speed: BigNumberish,
      magic: BigNumberish,
      luck: BigNumberish,
      colorScheme: string,
      wins: BigNumberish,
      losses: BigNumberish
    ],
    [string],
    "view"
  >;

  filters: {};
}
