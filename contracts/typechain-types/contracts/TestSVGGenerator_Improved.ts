/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TestSVGGenerator_ImprovedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "generateBerserkerSVG"
      | "generateGuardianSVG"
      | "generateMageSVG"
      | "generateTestSVG"
      | "generateWarriorSVG"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "generateBerserkerSVG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateGuardianSVG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateMageSVG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateTestSVG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateWarriorSVG",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "generateBerserkerSVG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateGuardianSVG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateMageSVG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateTestSVG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateWarriorSVG",
    data: BytesLike
  ): Result;
}

export interface TestSVGGenerator_Improved extends BaseContract {
  connect(runner?: ContractRunner | null): TestSVGGenerator_Improved;
  waitForDeployment(): Promise<this>;

  interface: TestSVGGenerator_ImprovedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  generateBerserkerSVG: TypedContractMethod<[], [string], "view">;

  generateGuardianSVG: TypedContractMethod<[], [string], "view">;

  generateMageSVG: TypedContractMethod<[], [string], "view">;

  generateTestSVG: TypedContractMethod<[], [string], "view">;

  generateWarriorSVG: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "generateBerserkerSVG"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "generateGuardianSVG"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "generateMageSVG"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "generateTestSVG"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "generateWarriorSVG"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
